name: "Terraform Deployment"
on:
  # Manual trigger
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches: [ main ]
defaults:
  run:
    shell: bash
jobs:
  terraform:
    name:   ${{matrix.runner}} - ${{ matrix.environment }}
    runs-on: [ '${{ matrix.runner }}']
    strategy:
      max-parallel: 1
      matrix:
         include:
           - environment: impl
             runner: ubuntu-latest
    env:
         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         DATASOURCE_URL: ${{ secrets.DATASOURCE_URL }}
         DATASOURCE_PASSWORD: ${{ secrets.DATASOURCE_PASSWORD }}
         JWT_HEADER_SECRET:  ${{ secrets.JWT_HEADER_SECRET }}
         AWS_DEFAULT_REGION: us-east-1
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1


      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: 905975536748.dkr.ecr.us-east-1.amazonaws.com
          ECR_REPOSITORY: acme-tech-challenge
        run: |
          # Build a docker container and push it to ECR
          export IMAGE_TAG=$(git rev-parse --short "$GITHUB_SHA")
          ./acme/build-app-properties.sh $DATASOURCE_URL $DATASOURCE_PASSWORD $JWT_HEADER_SECRET
          docker build --quiet -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
      - name: Terraform Init
        id: init
        run: |
           rm -rf .terraform
           terraform init -backend-config=${{ matrix.environment }}/terraform/backend.tfvars -upgrade=true -no-color -input=false
      - name: Terraform Plan
        id: plan
        run: |
          export IMAGE_TAG=$(git rev-parse --short "$GITHUB_SHA") 
          terraform plan -input=false -var-file=${{ matrix.environment }}/terraform/terraform.tfvars -var "image_tag=$IMAGE_TAG" -no-color 
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        id: apply
        run: |
          export IMAGE_TAG=$(git rev-parse --short "$GITHUB_SHA") 
          terraform apply -auto-approve -input=false -var-file=${{ matrix.environment }}/terraform/terraform.tfvars -var "image_tag=$IMAGE_TAG"
      - name: Terraform destroy
        if: github.ref == 'refs/heads/destroy'
        id: destroy
        run: |
          export IMAGE_TAG=$(git rev-parse --short "$GITHUB_SHA")  
          terraform destroy -auto-approve -input=false -var-file=${{ matrix.environment }}/terraform/terraform.tfvars -var "image_tag=$IMAGE_TAG"
  comment:
    runs-on: ubuntu-latest
    needs: terraform
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/github-script@v5
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸ‘‹ Thanks for reporting!'
            })
